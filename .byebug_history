c
exit
@file_statistics.last.total_rows
@file_statistics.last.total_row
@file_statistics.last
@file_statistics
exit
@file_statistics
exit
c
@file_statistics.total_rows
@file_statistics
exit
config['file_path']
config = YAML.load_file('config/application.yml')
ENV['file_path']
exit
EXIT
exit
data_csvs.sum(:nil_price)
c
current_result
last_result
last_result = file_statistic.as_json.transform_keys(&:to_sym)
      last_result = last_result.transform_keys(&:to_sym)
file_statistic
exit
t.to_i
t = nil
min
exit
sum += price.to_i
price.to_i
price
sum
exit
min < t
t = 0
t = o
min
price
exit
c
exit
c
exit
price
timestamp
c
exit
c
exit
puts "Archivo: #{file}"
puts "NÃºmero de filas: #{csv.length}"
csv.length
csv.size
csv.first.size
csv.first.row
csv.first
csv.firts
csv.column
csv.row
csv.size
csv.length
csv
num_columns = headers_row.length
num_columns = headers_row.lenght
num_columns = headers_row.row
num_columns = headers_row.size
headers_row = CSV.open(csv_file, &:readline)
exit
headers_row.size
headers_row = CSV.open(csv_text, &:readline)
headers_row = CSV.open(csv_file, &:readline)
csv.each {|f| puts f.size}
csv.each {|f| puts f.row.size}
csv.row
csv.size
csv.count
csv.row
exit
data_csvs.sum(:price)
data_csvs.average(:price)
exit
file_statistic.as_json
current_result
c
exit
ENV['file_path']
c
dag_result + a.transform_keys(&:to_sym)
dag_result += a.transform_keys(&:to_sym)
a.transform_keys(&:to_sym)
a
a.to_h
dag_result.to_h
dag_result
dag_result += a
a
dag_result
c
a
a.delete("created_at")
        a.delete("updated_at")
        a.delete("id")
a = file_statistic.as_json
a.delete("created_at")
file_statistic.as_json
a
dag_result
c
a.delete("created_at")
a.delete("created_at", "updated_at")
a.slice("created_at")
a.slice(:created_at)
a.delete(:created_at)
a = file_statistic.as_json
file_statistic.as_json
file_statistic.as_json.delete(:created_at)
file_statistic.as_json.slice(:created_at, :updated_at)
file_statistic.as_json.delete(:created_at, :updated_at)
file_statistic.as_json
file_statistic.to_json
file_statistic
c
file_statistic
c
file_statistic.total_rows
file_statistic
c
file_statistic
c
file_statistic
exit
c
data['price']
c
min
c
exit
c
file_statistic&.avg_price || 0
ile_statistic&.avg_price || 0
count_total
c
exit
file_statistic&.total_rows
file_statistic.total_rows&.to_i
file_statistic.total_rows.to_i
file_statistic&.total_rows
ile_statistic&.total_rows
ile_statistic.total_rows.to_i
ile_statistic.total_rows
file_statistic
exit
c
csv.inspect
csv
exit
fecha.strftime('%d/%m/%Y')
fecha = Date.strptime(fecha_string, '%m/%d/%Y')
fecha_string = '1/13/2012'
data['timestamp'].to_date.strftime('%d-%m-%Y')
data['timestamp'].to_date.strftime('%m-%d-%Y')
data['timestamp'].to_date.strptime('%m-%d-%Y')
data['timestamp'].to_date
data['timestamp'].to_date.strftime('%m-%d-%Y')
data['timestamp'].strftime('%m-%d-%Y')
data['timestamp'].strftime("%m-%d-%Y)
data['timestamp'].to_date
data['timestamp']
data[:timestamp]
data[timestamp]
data = row.to_hash
row
row.to_hash
row
c
estadistica
c
log_file.data_csvs.count
exit
log_file.date
log_file
exit
a.count
a.maximum(:price)
a.minimum(:price)
a.average(:price)
a.(average(:price))
a.(average(:price)
a.average(a.price)
DataCsv.where(log_file_id: id).average(:price)
a.price
average(a.price)
a.last
a
average(a.avg_price)
a.average(avg_price)
a.count
a = DataCsv.where(log_file_id: id)
id
date_csv
c
file
c
date_csv
date_csv.size
date_csv.count
c
DataCsv.find_by(log_file_id:id)
DataCsv.find_by(log_file_id:7)
id
c
log_file
log_file.id
og_file.id
c
exit
file =~ /\.csv\z/
file = 'angela.csv'
file =~ /\.csv\z/
file
c
files
entries
file
exit
dir
file
log_file
c
exit
c
row
c
row.to_hash.merge(clave: 'hola')
row.to_hash.merge(clave: hola)
row.to_hash
row.to_hash.timestamp
row.to_hash.v
row.to_hash
row.timestamp
row
c
csv = CSV.parse(csv_text, headers: true)
csv_text = File.read(path)
csv_text = File.read(path.path)
path = "#{dir}/#{file}"
dir
c
file
c
entries
files
files = entries.reject { |entry| File.directory?(File.join(directory_path, entry)) }
